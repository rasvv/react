{"version":3,"sources":["Components/MessageList/MessageList.js","Components/MessageInput/MessageInput.js","App.js","reportWebVitals.js","index.js"],"names":["MessageList","props","messageList","array","React","useEffect","length","mes","setTimeout","updateData","split","reverse","join","block","document","getElementsByClassName","scrollTop","scrollHeight","autoscroll","map","message","className","author","text","curtime","MessageInput","name","useState","value","setValue","onclick","onKeyDown","e","code","onChange","target","placeholder","onClick","App","setMessageList","addMessage","Date","toLocaleTimeString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2QAiCeA,MA9Bf,SAAqBC,GACpB,IAAMC,EAAcD,EAAME,MAkB1B,OAXAC,IAAMC,WAAU,WACf,GAAIH,EAAYI,OAAS,EAAG,CAC3B,IAAIC,EAAML,EAAYA,EAAYI,OAAS,GACrB,UAAlBC,EAAG,QACNC,YAAW,WACVP,EAAMQ,WAAWF,EAAG,KAASG,MAAM,IAAIC,UAAUC,KAAK,IAAK,WACzD,OAXa,WAClB,IAAIC,EAAQC,SAASC,uBAAuB,cAAc,GAC1DF,EAAMG,UAAYH,EAAMI,aAWxBC,MAIAhB,EAAYiB,KAAI,SAACC,GAAD,OACf,sBAAKC,UAA8B,UAAnBD,EAAQE,OAAqB,WAAa,MAA1D,UACC,8BAAMF,EAAQG,OACd,uBACA,kCAAQH,EAAQE,OAAhB,KAA0BF,EAAQI,kB,MCKvBC,MA7Bf,SAAsBxB,GACrB,IAAQyB,EAASzB,EAATyB,KACR,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAaMC,EAAU,WACf7B,EAAMQ,WAAWmB,EAAOF,GACxBG,EAAS,KAIV,OACC,sBAAKR,UAAU,eAAf,UACC,uBAAOO,MAAOA,EAAOG,UAfL,SAACC,GACH,UAAXA,EAAEC,MAA+B,gBAAXD,EAAEC,MAC3BH,KAa2CI,SAnB5B,SAACF,GACjBH,EAASG,EAAEG,OAAOP,QAkB8CQ,YAAY,sGAC3E,wBAAQC,QAASP,EAAjB,wECCYQ,MAvBf,SAAarC,GACZ,MAAsC0B,mBAAS,IAA/C,mBAAOzB,EAAP,KAAoBqC,EAApB,KAGMC,EAAa,SAACpB,EAASM,GAC5Ba,GAAe,SAAArC,GAAW,4BAAQA,GAAR,CAAqB,CAAEqB,KAAMH,EAASE,OAAQI,EAAMF,SAAS,IAAIiB,MAAOC,4BAGnG,OACC,sBAAKrB,UAAU,MAAf,UACC,wBAAQA,UAAU,oBAAlB,0BAGA,qBAAKA,UAAU,aAAf,SACC,cAAE,EAAF,CAAcZ,WAAY+B,EAAYrC,MAAOD,MAE9C,8BACC,cAAE,EAAF,CAAeO,WAAY+B,EAAYd,KAAMzB,EAAMyB,aCVxCiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK5B,KAJI,iDAMXZ,SAASyC,eAAe,SAM1BZ,M","file":"static/js/main.006727e7.chunk.js","sourcesContent":["import './messagelist.sass'\r\nimport React from 'react'\r\n\r\nfunction MessageList(props) {\r\n\tconst messageList = props.array\r\n\r\n\tconst autoscroll = () => {\r\n\t\tvar block = document.getElementsByClassName(\"messagebox\")[0];\r\n\t\tblock.scrollTop = block.scrollHeight;\r\n\t}\r\n\r\n\tReact.useEffect(() => {\r\n\t\tif (messageList.length > 0) {\r\n\t\t\tlet mes = messageList[messageList.length - 1]\r\n\t\t\tif (mes['author'] !== 'robot')\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tprops.updateData(mes['text'].split('').reverse().join(''), 'robot')\r\n\t\t\t\t}, 1500)\r\n\t\t}\r\n\t\tautoscroll()\r\n\t})\r\n\r\n\treturn (\r\n\t\tmessageList.map((message) =>\r\n\t\t\t<div className={message.author === \"robot\" ? \"mes left\" : \"mes\"}>\r\n\t\t\t\t<big>{message.text}</big>\r\n\t\t\t\t<br />\r\n\t\t\t\t<small>{message.author}  {message.curtime}</small>\r\n\t\t\t</div>\r\n\t\t)\r\n\t)\r\n}\r\n\r\nexport default MessageList;","import \"./MessageInput.sass\";\r\nimport { useState } from 'react'\r\n\r\nfunction MessageInput(props) {\r\n\tconst { name } = props\r\n\tconst [value, setValue] = useState('');\r\n\r\n\tconst onchange = (e) => {\r\n\t\tsetValue(e.target.value)\r\n\t}\r\n\r\n\tconst onkeydown = (e) => {\r\n\t\tif (e.code === 'Enter' || e.code === 'NumpadEnter') {\r\n\t\t\tonclick()\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tconst onclick = () => {\r\n\t\tprops.updateData(value, name)\r\n\t\tsetValue('')\r\n\t\t// autoscroll()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"messageinput\">\r\n\t\t\t<input value={value} onKeyDown={onkeydown} onChange={onchange} placeholder=\"Введите сообщение\" />\r\n\t\t\t<button onClick={onclick}>Отправить</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default MessageInput\r\n\r\n\r\n\r\n","import './App.sass'\r\nimport { useState } from 'react'\r\nimport MessageList from './Components/MessageList/MessageList'\r\nimport MessageInput from './Components/MessageInput/MessageInput'\r\n\r\nfunction App(props) {\r\n\tconst [messageList, setMessageList] = useState([])\r\n\t// let timenow = new Date().now.toLocalSting()\r\n\r\n\tconst addMessage = (message, name) => {\r\n\t\tsetMessageList(messageList => [...messageList, { text: message, author: name, curtime: new Date().toLocaleTimeString() }])\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<header className=\"App-header header\">\r\n\t\t\t\tMy messenger\r\n\t\t\t</header>\r\n\t\t\t<div className=\"messagebox\">\r\n\t\t\t\t< MessageList updateData={addMessage} array={messageList} />\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t< MessageInput updateData={addMessage} name={props.name} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst name = \"Валерий\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App name={name}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}